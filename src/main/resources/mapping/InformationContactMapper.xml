<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.mapper.InformationContactMapper">
  <resultMap id="BaseResultMap" type="test.domain.InformationContact">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="home_address" jdbcType="VARCHAR" property="homeAddress" />
    <result column="phone_home" jdbcType="VARCHAR" property="phoneHome" />
    <result column="phone_own" jdbcType="CHAR" property="phoneOwn" />
    <result column="phone_children" jdbcType="VARCHAR" property="phoneChildren" />
    <result column="phone_other" jdbcType="VARCHAR" property="phoneOther" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, home_address, phone_home, phone_own, phone_children, phone_other
  </sql>
  <select id="selectByExample" parameterType="test.domain.InformationContactExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from information_contact
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from information_contact
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from information_contact
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="test.domain.InformationContactExample">
    delete from information_contact
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="test.domain.InformationContact">
    insert into information_contact (id, home_address, phone_home, 
      phone_own, phone_children, phone_other
      )
    values (#{id,jdbcType=INTEGER}, #{homeAddress,jdbcType=VARCHAR}, #{phoneHome,jdbcType=VARCHAR}, 
      #{phoneOwn,jdbcType=CHAR}, #{phoneChildren,jdbcType=VARCHAR}, #{phoneOther,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="test.domain.InformationContact">
    insert into information_contact
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="homeAddress != null">
        home_address,
      </if>
      <if test="phoneHome != null">
        phone_home,
      </if>
      <if test="phoneOwn != null">
        phone_own,
      </if>
      <if test="phoneChildren != null">
        phone_children,
      </if>
      <if test="phoneOther != null">
        phone_other,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="homeAddress != null">
        #{homeAddress,jdbcType=VARCHAR},
      </if>
      <if test="phoneHome != null">
        #{phoneHome,jdbcType=VARCHAR},
      </if>
      <if test="phoneOwn != null">
        #{phoneOwn,jdbcType=CHAR},
      </if>
      <if test="phoneChildren != null">
        #{phoneChildren,jdbcType=VARCHAR},
      </if>
      <if test="phoneOther != null">
        #{phoneOther,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="test.domain.InformationContactExample" resultType="java.lang.Long">
    select count(*) from information_contact
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update information_contact
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.homeAddress != null">
        home_address = #{record.homeAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneHome != null">
        phone_home = #{record.phoneHome,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneOwn != null">
        phone_own = #{record.phoneOwn,jdbcType=CHAR},
      </if>
      <if test="record.phoneChildren != null">
        phone_children = #{record.phoneChildren,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneOther != null">
        phone_other = #{record.phoneOther,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update information_contact
    set id = #{record.id,jdbcType=INTEGER},
      home_address = #{record.homeAddress,jdbcType=VARCHAR},
      phone_home = #{record.phoneHome,jdbcType=VARCHAR},
      phone_own = #{record.phoneOwn,jdbcType=CHAR},
      phone_children = #{record.phoneChildren,jdbcType=VARCHAR},
      phone_other = #{record.phoneOther,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="test.domain.InformationContact">
    update information_contact
    <set>
      <if test="homeAddress != null">
        home_address = #{homeAddress,jdbcType=VARCHAR},
      </if>
      <if test="phoneHome != null">
        phone_home = #{phoneHome,jdbcType=VARCHAR},
      </if>
      <if test="phoneOwn != null">
        phone_own = #{phoneOwn,jdbcType=CHAR},
      </if>
      <if test="phoneChildren != null">
        phone_children = #{phoneChildren,jdbcType=VARCHAR},
      </if>
      <if test="phoneOther != null">
        phone_other = #{phoneOther,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="test.domain.InformationContact">
    update information_contact
    set home_address = #{homeAddress,jdbcType=VARCHAR},
      phone_home = #{phoneHome,jdbcType=VARCHAR},
      phone_own = #{phoneOwn,jdbcType=CHAR},
      phone_children = #{phoneChildren,jdbcType=VARCHAR},
      phone_other = #{phoneOther,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>